
remote_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  000006ce  00000742  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000077e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001411  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000098b  00000000  00000000  00001d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a9a  00000000  00000000  000026a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000288  00000000  00000000  00003144  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000611  00000000  00000000  000033cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ba0  00000000  00000000  000039dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  0000457d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ec       	ldi	r30, 0xCE	; 206
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 39       	cpi	r26, 0x9C	; 156
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 24 02 	call	0x448	; 0x448 <main>
  7a:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_Vid_Set_Pin_Dir>:
		
		
			 case PORTA : TOGGLE_BIT(PORTA_REG,copy_u8_pin);break;
			 case PORTB : TOGGLE_BIT(PORTB_REG,copy_u8_pin);break;
			 case PORTC : TOGGLE_BIT(PORTC_REG,copy_u8_pin);break;
			 case PORTD : TOGGLE_BIT(PORTD_REG,copy_u8_pin);break;
  82:	42 30       	cpi	r20, 0x02	; 2
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_Vid_Set_Pin_Dir+0x6>
  86:	6d c0       	rjmp	.+218    	; 0x162 <DIO_Vid_Set_Pin_Dir+0xe0>
  88:	41 30       	cpi	r20, 0x01	; 1
  8a:	a1 f5       	brne	.+104    	; 0xf4 <DIO_Vid_Set_Pin_Dir+0x72>
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	89 f0       	breq	.+34     	; 0xb2 <DIO_Vid_Set_Pin_Dir+0x30>
  90:	28 f0       	brcs	.+10     	; 0x9c <DIO_Vid_Set_Pin_Dir+0x1a>
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	c9 f0       	breq	.+50     	; 0xc8 <DIO_Vid_Set_Pin_Dir+0x46>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	11 f1       	breq	.+68     	; 0xde <DIO_Vid_Set_Pin_Dir+0x5c>
  9a:	08 95       	ret
  9c:	2a b3       	in	r18, 0x1a	; 26
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_Vid_Set_Pin_Dir+0x26>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_Vid_Set_Pin_Dir+0x22>
  ac:	82 2b       	or	r24, r18
  ae:	8a bb       	out	0x1a, r24	; 26
  b0:	08 95       	ret
  b2:	27 b3       	in	r18, 0x17	; 23
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_Vid_Set_Pin_Dir+0x3c>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_Vid_Set_Pin_Dir+0x38>
  c2:	82 2b       	or	r24, r18
  c4:	87 bb       	out	0x17, r24	; 23
  c6:	08 95       	ret
  c8:	24 b3       	in	r18, 0x14	; 20
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_Vid_Set_Pin_Dir+0x52>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_Vid_Set_Pin_Dir+0x4e>
  d8:	82 2b       	or	r24, r18
  da:	84 bb       	out	0x14, r24	; 20
  dc:	08 95       	ret
  de:	21 b3       	in	r18, 0x11	; 17
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_Vid_Set_Pin_Dir+0x68>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_Vid_Set_Pin_Dir+0x64>
  ee:	82 2b       	or	r24, r18
  f0:	81 bb       	out	0x11, r24	; 17
  f2:	08 95       	ret
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	91 f0       	breq	.+36     	; 0x11c <DIO_Vid_Set_Pin_Dir+0x9a>
  f8:	28 f0       	brcs	.+10     	; 0x104 <DIO_Vid_Set_Pin_Dir+0x82>
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	d9 f0       	breq	.+54     	; 0x134 <DIO_Vid_Set_Pin_Dir+0xb2>
  fe:	83 30       	cpi	r24, 0x03	; 3
 100:	29 f1       	breq	.+74     	; 0x14c <DIO_Vid_Set_Pin_Dir+0xca>
 102:	08 95       	ret
 104:	2a b3       	in	r18, 0x1a	; 26
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_Vid_Set_Pin_Dir+0x8e>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_Vid_Set_Pin_Dir+0x8a>
 114:	80 95       	com	r24
 116:	82 23       	and	r24, r18
 118:	8a bb       	out	0x1a, r24	; 26
 11a:	08 95       	ret
 11c:	27 b3       	in	r18, 0x17	; 23
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_Vid_Set_Pin_Dir+0xa6>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_Vid_Set_Pin_Dir+0xa2>
 12c:	80 95       	com	r24
 12e:	82 23       	and	r24, r18
 130:	87 bb       	out	0x17, r24	; 23
 132:	08 95       	ret
 134:	24 b3       	in	r18, 0x14	; 20
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_Vid_Set_Pin_Dir+0xbe>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_Vid_Set_Pin_Dir+0xba>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	84 bb       	out	0x14, r24	; 20
 14a:	08 95       	ret
 14c:	21 b3       	in	r18, 0x11	; 17
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_Vid_Set_Pin_Dir+0xd6>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	6a 95       	dec	r22
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_Vid_Set_Pin_Dir+0xd2>
 15c:	80 95       	com	r24
 15e:	82 23       	and	r24, r18
 160:	81 bb       	out	0x11, r24	; 17
 162:	08 95       	ret

00000164 <DIO_Vid_Set_Pin_Val>:
 164:	42 30       	cpi	r20, 0x02	; 2
 166:	08 f0       	brcs	.+2      	; 0x16a <DIO_Vid_Set_Pin_Val+0x6>
 168:	6d c0       	rjmp	.+218    	; 0x244 <DIO_Vid_Set_Pin_Val+0xe0>
 16a:	41 30       	cpi	r20, 0x01	; 1
 16c:	a1 f5       	brne	.+104    	; 0x1d6 <DIO_Vid_Set_Pin_Val+0x72>
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	89 f0       	breq	.+34     	; 0x194 <DIO_Vid_Set_Pin_Val+0x30>
 172:	28 f0       	brcs	.+10     	; 0x17e <DIO_Vid_Set_Pin_Val+0x1a>
 174:	82 30       	cpi	r24, 0x02	; 2
 176:	c9 f0       	breq	.+50     	; 0x1aa <DIO_Vid_Set_Pin_Val+0x46>
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	11 f1       	breq	.+68     	; 0x1c0 <DIO_Vid_Set_Pin_Val+0x5c>
 17c:	08 95       	ret
 17e:	2b b3       	in	r18, 0x1b	; 27
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_Vid_Set_Pin_Val+0x26>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_Vid_Set_Pin_Val+0x22>
 18e:	82 2b       	or	r24, r18
 190:	8b bb       	out	0x1b, r24	; 27
 192:	08 95       	ret
 194:	28 b3       	in	r18, 0x18	; 24
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_Vid_Set_Pin_Val+0x3c>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_Vid_Set_Pin_Val+0x38>
 1a4:	82 2b       	or	r24, r18
 1a6:	88 bb       	out	0x18, r24	; 24
 1a8:	08 95       	ret
 1aa:	25 b3       	in	r18, 0x15	; 21
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_Vid_Set_Pin_Val+0x52>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_Vid_Set_Pin_Val+0x4e>
 1ba:	82 2b       	or	r24, r18
 1bc:	85 bb       	out	0x15, r24	; 21
 1be:	08 95       	ret
 1c0:	22 b3       	in	r18, 0x12	; 18
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_Vid_Set_Pin_Val+0x68>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_Vid_Set_Pin_Val+0x64>
 1d0:	82 2b       	or	r24, r18
 1d2:	82 bb       	out	0x12, r24	; 18
 1d4:	08 95       	ret
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	91 f0       	breq	.+36     	; 0x1fe <DIO_Vid_Set_Pin_Val+0x9a>
 1da:	28 f0       	brcs	.+10     	; 0x1e6 <DIO_Vid_Set_Pin_Val+0x82>
 1dc:	82 30       	cpi	r24, 0x02	; 2
 1de:	d9 f0       	breq	.+54     	; 0x216 <DIO_Vid_Set_Pin_Val+0xb2>
 1e0:	83 30       	cpi	r24, 0x03	; 3
 1e2:	29 f1       	breq	.+74     	; 0x22e <DIO_Vid_Set_Pin_Val+0xca>
 1e4:	08 95       	ret
 1e6:	2b b3       	in	r18, 0x1b	; 27
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_Vid_Set_Pin_Val+0x8e>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_Vid_Set_Pin_Val+0x8a>
 1f6:	80 95       	com	r24
 1f8:	82 23       	and	r24, r18
 1fa:	8b bb       	out	0x1b, r24	; 27
 1fc:	08 95       	ret
 1fe:	28 b3       	in	r18, 0x18	; 24
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_Vid_Set_Pin_Val+0xa6>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_Vid_Set_Pin_Val+0xa2>
 20e:	80 95       	com	r24
 210:	82 23       	and	r24, r18
 212:	88 bb       	out	0x18, r24	; 24
 214:	08 95       	ret
 216:	25 b3       	in	r18, 0x15	; 21
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_Vid_Set_Pin_Val+0xbe>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_Vid_Set_Pin_Val+0xba>
 226:	80 95       	com	r24
 228:	82 23       	and	r24, r18
 22a:	85 bb       	out	0x15, r24	; 21
 22c:	08 95       	ret
 22e:	22 b3       	in	r18, 0x12	; 18
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_Vid_Set_Pin_Val+0xd6>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_Vid_Set_Pin_Val+0xd2>
 23e:	80 95       	com	r24
 240:	82 23       	and	r24, r18
 242:	82 bb       	out	0x12, r24	; 18
 244:	08 95       	ret

00000246 <DIO_u8_Get_Pin_Val>:
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	79 f0       	breq	.+30     	; 0x268 <DIO_u8_Get_Pin_Val+0x22>
 24a:	28 f0       	brcs	.+10     	; 0x256 <DIO_u8_Get_Pin_Val+0x10>
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	a9 f0       	breq	.+42     	; 0x27a <DIO_u8_Get_Pin_Val+0x34>
 250:	83 30       	cpi	r24, 0x03	; 3
 252:	e1 f0       	breq	.+56     	; 0x28c <DIO_u8_Get_Pin_Val+0x46>
 254:	24 c0       	rjmp	.+72     	; 0x29e <DIO_u8_Get_Pin_Val+0x58>
 256:	89 b3       	in	r24, 0x19	; 25
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_u8_Get_Pin_Val+0x1a>
 25c:	95 95       	asr	r25
 25e:	87 95       	ror	r24
 260:	6a 95       	dec	r22
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_u8_Get_Pin_Val+0x16>
 264:	81 70       	andi	r24, 0x01	; 1
 266:	08 95       	ret
 268:	86 b3       	in	r24, 0x16	; 22
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_u8_Get_Pin_Val+0x2c>
 26e:	95 95       	asr	r25
 270:	87 95       	ror	r24
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_u8_Get_Pin_Val+0x28>
 276:	81 70       	andi	r24, 0x01	; 1
 278:	08 95       	ret
 27a:	83 b3       	in	r24, 0x13	; 19
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_u8_Get_Pin_Val+0x3e>
 280:	95 95       	asr	r25
 282:	87 95       	ror	r24
 284:	6a 95       	dec	r22
 286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_u8_Get_Pin_Val+0x3a>
 288:	81 70       	andi	r24, 0x01	; 1
 28a:	08 95       	ret
 28c:	80 b3       	in	r24, 0x10	; 16
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	02 c0       	rjmp	.+4      	; 0x296 <DIO_u8_Get_Pin_Val+0x50>
 292:	95 95       	asr	r25
 294:	87 95       	ror	r24
 296:	6a 95       	dec	r22
 298:	e2 f7       	brpl	.-8      	; 0x292 <DIO_u8_Get_Pin_Val+0x4c>
 29a:	81 70       	andi	r24, 0x01	; 1
 29c:	08 95       	ret
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	08 95       	ret

000002a2 <DIO_Vid_Set_Port_Dir>:
	
}
void DIO_Vid_Set_Port_Dir(u8 copy_u8_port,u8 copy_u8_dir){
		
		
		 if(copy_u8_dir==PORT_OUTPUT|| copy_u8_dir==PORT_INPUT ){
 2a2:	9f ef       	ldi	r25, 0xFF	; 255
 2a4:	96 0f       	add	r25, r22
 2a6:	9e 3f       	cpi	r25, 0xFE	; 254
 2a8:	28 f1       	brcs	.+74     	; 0x2f4 <DIO_Vid_Set_Port_Dir+0x52>
			 
			 if(copy_u8_dir==PORT_OUTPUT){
 2aa:	6f 3f       	cpi	r22, 0xFF	; 255
 2ac:	a1 f4       	brne	.+40     	; 0x2d6 <DIO_Vid_Set_Port_Dir+0x34>
		
		switch(copy_u8_port){
 2ae:	81 30       	cpi	r24, 0x01	; 1
 2b0:	49 f0       	breq	.+18     	; 0x2c4 <DIO_Vid_Set_Port_Dir+0x22>
 2b2:	28 f0       	brcs	.+10     	; 0x2be <DIO_Vid_Set_Port_Dir+0x1c>
 2b4:	82 30       	cpi	r24, 0x02	; 2
 2b6:	49 f0       	breq	.+18     	; 0x2ca <DIO_Vid_Set_Port_Dir+0x28>
 2b8:	83 30       	cpi	r24, 0x03	; 3
 2ba:	51 f0       	breq	.+20     	; 0x2d0 <DIO_Vid_Set_Port_Dir+0x2e>
 2bc:	08 95       	ret
			
				case PORTA :DDRA_REG=PORT_OUTPUT;break;	
 2be:	8f ef       	ldi	r24, 0xFF	; 255
 2c0:	8a bb       	out	0x1a, r24	; 26
 2c2:	08 95       	ret
				case PORTB :DDRB_REG=PORT_OUTPUT;break;
 2c4:	8f ef       	ldi	r24, 0xFF	; 255
 2c6:	87 bb       	out	0x17, r24	; 23
 2c8:	08 95       	ret
				case PORTC :DDRC_REG=PORT_OUTPUT;break;
 2ca:	8f ef       	ldi	r24, 0xFF	; 255
 2cc:	84 bb       	out	0x14, r24	; 20
 2ce:	08 95       	ret
				case PORTD :DDRD_REG=PORT_OUTPUT;break;
 2d0:	8f ef       	ldi	r24, 0xFF	; 255
 2d2:	81 bb       	out	0x11, r24	; 17
 2d4:	08 95       	ret
			
			
		}
		}
		else{
					switch(copy_u8_port){
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	41 f0       	breq	.+16     	; 0x2ea <DIO_Vid_Set_Port_Dir+0x48>
 2da:	28 f0       	brcs	.+10     	; 0x2e6 <DIO_Vid_Set_Port_Dir+0x44>
 2dc:	82 30       	cpi	r24, 0x02	; 2
 2de:	39 f0       	breq	.+14     	; 0x2ee <DIO_Vid_Set_Port_Dir+0x4c>
 2e0:	83 30       	cpi	r24, 0x03	; 3
 2e2:	39 f0       	breq	.+14     	; 0x2f2 <DIO_Vid_Set_Port_Dir+0x50>
 2e4:	08 95       	ret
						
						case PORTA :DDRA_REG=PORT_INPUT;break;
 2e6:	1a ba       	out	0x1a, r1	; 26
 2e8:	08 95       	ret
						case PORTB :DDRB_REG=PORT_INPUT;break;
 2ea:	17 ba       	out	0x17, r1	; 23
 2ec:	08 95       	ret
						case PORTC :DDRC_REG=PORT_INPUT;break;
 2ee:	14 ba       	out	0x14, r1	; 20
 2f0:	08 95       	ret
						case PORTD :DDRD_REG=PORT_INPUT;break;
 2f2:	11 ba       	out	0x11, r1	; 17
 2f4:	08 95       	ret

000002f6 <SHData>:
	}while(copy_u32_num>0);
	Loc_u8_in1--;
	for(Loc_u8_in2=0;Loc_u8_in2<=Loc_u8_in1;Loc_u8_in2++){
		LCD_Vid_Send_Data((arr[Loc_u8_in1-Loc_u8_in2]+48));
	}
}
 2f6:	0f 93       	push	r16
 2f8:	1f 93       	push	r17
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	00 d0       	rcall	.+0      	; 0x300 <SHData+0xa>
 300:	00 d0       	rcall	.+0      	; 0x302 <SHData+0xc>
 302:	cd b7       	in	r28, 0x3d	; 61
 304:	de b7       	in	r29, 0x3e	; 62
 306:	08 2f       	mov	r16, r24
 308:	84 e0       	ldi	r24, 0x04	; 4
 30a:	89 83       	std	Y+1, r24	; 0x01
 30c:	85 e0       	ldi	r24, 0x05	; 5
 30e:	8a 83       	std	Y+2, r24	; 0x02
 310:	86 e0       	ldi	r24, 0x06	; 6
 312:	8b 83       	std	Y+3, r24	; 0x03
 314:	87 e0       	ldi	r24, 0x07	; 7
 316:	8c 83       	std	Y+4, r24	; 0x04
 318:	10 e0       	ldi	r17, 0x00	; 0
 31a:	14 c0       	rjmp	.+40     	; 0x344 <SHData+0x4e>
 31c:	40 2f       	mov	r20, r16
 31e:	50 e0       	ldi	r21, 0x00	; 0
 320:	01 2e       	mov	r0, r17
 322:	02 c0       	rjmp	.+4      	; 0x328 <SHData+0x32>
 324:	55 95       	asr	r21
 326:	47 95       	ror	r20
 328:	0a 94       	dec	r0
 32a:	e2 f7       	brpl	.-8      	; 0x324 <SHData+0x2e>
 32c:	41 70       	andi	r20, 0x01	; 1
 32e:	e1 e0       	ldi	r30, 0x01	; 1
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	ec 0f       	add	r30, r28
 334:	fd 1f       	adc	r31, r29
 336:	e1 0f       	add	r30, r17
 338:	f1 1d       	adc	r31, r1
 33a:	60 81       	ld	r22, Z
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_Vid_Set_Pin_Val>
 342:	1f 5f       	subi	r17, 0xFF	; 255
 344:	14 30       	cpi	r17, 0x04	; 4
 346:	50 f3       	brcs	.-44     	; 0x31c <SHData+0x26>
 348:	0f 90       	pop	r0
 34a:	0f 90       	pop	r0
 34c:	0f 90       	pop	r0
 34e:	0f 90       	pop	r0
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	1f 91       	pop	r17
 356:	0f 91       	pop	r16
 358:	08 95       	ret

0000035a <Send_Enable>:
 35a:	41 e0       	ldi	r20, 0x01	; 1
 35c:	63 e0       	ldi	r22, 0x03	; 3
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_Vid_Set_Pin_Val>
 364:	8f e3       	ldi	r24, 0x3F	; 63
 366:	9f e1       	ldi	r25, 0x1F	; 31
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <Send_Enable+0xe>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <Send_Enable+0x14>
 36e:	00 00       	nop
 370:	40 e0       	ldi	r20, 0x00	; 0
 372:	63 e0       	ldi	r22, 0x03	; 3
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_Vid_Set_Pin_Val>
 37a:	08 95       	ret

0000037c <LCD_Vid_Send_Command>:
 37c:	cf 93       	push	r28
 37e:	c8 2f       	mov	r28, r24
 380:	40 e0       	ldi	r20, 0x00	; 0
 382:	61 e0       	ldi	r22, 0x01	; 1
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_Vid_Set_Pin_Val>
 38a:	40 e0       	ldi	r20, 0x00	; 0
 38c:	62 e0       	ldi	r22, 0x02	; 2
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_Vid_Set_Pin_Val>
 394:	8c 2f       	mov	r24, r28
 396:	82 95       	swap	r24
 398:	8f 70       	andi	r24, 0x0F	; 15
 39a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <SHData>
 39e:	0e 94 ad 01 	call	0x35a	; 0x35a <Send_Enable>
 3a2:	8c 2f       	mov	r24, r28
 3a4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <SHData>
 3a8:	0e 94 ad 01 	call	0x35a	; 0x35a <Send_Enable>
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <LCD_Vid_Send_Data>:
 3b0:	cf 93       	push	r28
 3b2:	c8 2f       	mov	r28, r24
 3b4:	41 e0       	ldi	r20, 0x01	; 1
 3b6:	61 e0       	ldi	r22, 0x01	; 1
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_Vid_Set_Pin_Val>
 3be:	40 e0       	ldi	r20, 0x00	; 0
 3c0:	62 e0       	ldi	r22, 0x02	; 2
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_Vid_Set_Pin_Val>
 3c8:	8c 2f       	mov	r24, r28
 3ca:	82 95       	swap	r24
 3cc:	8f 70       	andi	r24, 0x0F	; 15
 3ce:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <SHData>
 3d2:	0e 94 ad 01 	call	0x35a	; 0x35a <Send_Enable>
 3d6:	8c 2f       	mov	r24, r28
 3d8:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <SHData>
 3dc:	0e 94 ad 01 	call	0x35a	; 0x35a <Send_Enable>
 3e0:	cf 91       	pop	r28
 3e2:	08 95       	ret

000003e4 <LCD_Vid_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3e4:	2f ef       	ldi	r18, 0xFF	; 255
 3e6:	83 ef       	ldi	r24, 0xF3	; 243
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	21 50       	subi	r18, 0x01	; 1
 3ec:	80 40       	sbci	r24, 0x00	; 0
 3ee:	90 40       	sbci	r25, 0x00	; 0
 3f0:	e1 f7       	brne	.-8      	; 0x3ea <LCD_Vid_Init+0x6>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <LCD_Vid_Init+0x10>
 3f4:	00 00       	nop
void LCD_Vid_Init(void){
	_delay_ms(40) ;
	
	#if LCD_MODE ==  FOUR_BIT_MODE 
	      /* SEND  function set  */
		  SHData(0b0010) ; 
 3f6:	82 e0       	ldi	r24, 0x02	; 2
 3f8:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <SHData>
		  Send_Enable() ; 
 3fc:	0e 94 ad 01 	call	0x35a	; 0x35a <Send_Enable>
		  SHData(0b0010) ; 
 400:	82 e0       	ldi	r24, 0x02	; 2
 402:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <SHData>
		  Send_Enable() ; 
 406:	0e 94 ad 01 	call	0x35a	; 0x35a <Send_Enable>
		  SHData(0b1000) ;
 40a:	88 e0       	ldi	r24, 0x08	; 8
 40c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <SHData>
		  Send_Enable() ; 
 410:	0e 94 ad 01 	call	0x35a	; 0x35a <Send_Enable>
    #elif LCD_MODE == EIGHT_BIT_MODE 	
	/* SEND  function set  */
	LCD_Vid_Send_Command(0x3C) ; 
	#endif 
	/* send ON/OFF Command  */ 
	LCD_Vid_Send_Command(0x0C) ; 
 414:	8c e0       	ldi	r24, 0x0C	; 12
 416:	0e 94 be 01 	call	0x37c	; 0x37c <LCD_Vid_Send_Command>
	/* send  CLR command  */
	LCD_Vid_Send_Command(1) ; 
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	0e 94 be 01 	call	0x37c	; 0x37c <LCD_Vid_Send_Command>
 420:	08 95       	ret

00000422 <LCD_Vid_Send_String>:

}

void LCD_Vid_Send_String(ch8 * add_u8_str){
 422:	0f 93       	push	r16
 424:	1f 93       	push	r17
 426:	cf 93       	push	r28
 428:	8c 01       	movw	r16, r24
	
	u8 Loc_u8_in=0 ;
 42a:	c0 e0       	ldi	r28, 0x00	; 0
	while(add_u8_str[Loc_u8_in] != '\0'){
 42c:	03 c0       	rjmp	.+6      	; 0x434 <LCD_Vid_Send_String+0x12>
		
		LCD_Vid_Send_Data(add_u8_str[Loc_u8_in]) ;
 42e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <LCD_Vid_Send_Data>
		Loc_u8_in++ ; 
 432:	cf 5f       	subi	r28, 0xFF	; 255
}

void LCD_Vid_Send_String(ch8 * add_u8_str){
	
	u8 Loc_u8_in=0 ;
	while(add_u8_str[Loc_u8_in] != '\0'){
 434:	f8 01       	movw	r30, r16
 436:	ec 0f       	add	r30, r28
 438:	f1 1d       	adc	r31, r1
 43a:	80 81       	ld	r24, Z
 43c:	81 11       	cpse	r24, r1
 43e:	f7 cf       	rjmp	.-18     	; 0x42e <LCD_Vid_Send_String+0xc>
		LCD_Vid_Send_Data(add_u8_str[Loc_u8_in]) ;
		Loc_u8_in++ ; 
	}
	
	
}
 440:	cf 91       	pop	r28
 442:	1f 91       	pop	r17
 444:	0f 91       	pop	r16
 446:	08 95       	ret

00000448 <main>:
#include <util/delay.h>

int main(void){
	
	/* LCD DIR */
	DIO_Vid_Set_Port_Dir(LCD_DPORT,PORT_OUTPUT);
 448:	6f ef       	ldi	r22, 0xFF	; 255
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <DIO_Vid_Set_Port_Dir>
	DIO_Vid_Set_Pin_Dir(LCD_CPORT,LCD_RS_PIN,OUTPUT);
 450:	41 e0       	ldi	r20, 0x01	; 1
 452:	61 e0       	ldi	r22, 0x01	; 1
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Vid_Set_Pin_Dir>
	DIO_Vid_Set_Pin_Dir(LCD_CPORT,LCD_RW_PIN,OUTPUT);
 45a:	41 e0       	ldi	r20, 0x01	; 1
 45c:	62 e0       	ldi	r22, 0x02	; 2
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Vid_Set_Pin_Dir>
	DIO_Vid_Set_Pin_Dir(LCD_CPORT,LCD_EN_PIN,OUTPUT);
 464:	41 e0       	ldi	r20, 0x01	; 1
 466:	63 e0       	ldi	r22, 0x03	; 3
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Vid_Set_Pin_Dir>
	
	LCD_Vid_Init();
 46e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_Vid_Init>
		
	KEYPAD_Vid_Init();
 472:	0e 94 95 02 	call	0x52a	; 0x52a <KEYPAD_Vid_Init>
	UART_Vid_Init();
 476:	0e 94 56 03 	call	0x6ac	; 0x6ac <UART_Vid_Init>
	DIO_Vid_Set_Pin_Dir(PORTD,PIN1,OUTPUT); 
 47a:	41 e0       	ldi	r20, 0x01	; 1
 47c:	61 e0       	ldi	r22, 0x01	; 1
 47e:	83 e0       	ldi	r24, 0x03	; 3
 480:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Vid_Set_Pin_Dir>
	u8 Loc_u8_val = 0;
	
	LCD_Vid_Send_String("welcome :)");
 484:	80 e7       	ldi	r24, 0x70	; 112
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	0e 94 11 02 	call	0x422	; 0x422 <LCD_Vid_Send_String>
 48c:	2f ef       	ldi	r18, 0xFF	; 255
 48e:	83 ed       	ldi	r24, 0xD3	; 211
 490:	90 e3       	ldi	r25, 0x30	; 48
 492:	21 50       	subi	r18, 0x01	; 1
 494:	80 40       	sbci	r24, 0x00	; 0
 496:	90 40       	sbci	r25, 0x00	; 0
 498:	e1 f7       	brne	.-8      	; 0x492 <main+0x4a>
 49a:	00 c0       	rjmp	.+0      	; 0x49c <main+0x54>
 49c:	00 00       	nop
	_delay_ms(1000);
	LCD_Vid_Send_Command(LCD_CLR);	
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	0e 94 be 01 	call	0x37c	; 0x37c <LCD_Vid_Send_Command>
  while (1){
		Loc_u8_val=KEYPAD_u8_Get_Key();
 4a4:	0e 94 e5 02 	call	0x5ca	; 0x5ca <KEYPAD_u8_Get_Key>
		if(Loc_u8_val == 2){
 4a8:	82 30       	cpi	r24, 0x02	; 2
 4aa:	59 f4       	brne	.+22     	; 0x4c2 <main+0x7a>
			UART_Vid_TX('F');
 4ac:	86 e4       	ldi	r24, 0x46	; 70
 4ae:	0e 94 61 03 	call	0x6c2	; 0x6c2 <UART_Vid_TX>
			LCD_Vid_Send_Command(LCD_CLR);
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	0e 94 be 01 	call	0x37c	; 0x37c <LCD_Vid_Send_Command>
			LCD_Vid_Send_String("forward");
 4b8:	8b e7       	ldi	r24, 0x7B	; 123
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	0e 94 11 02 	call	0x422	; 0x422 <LCD_Vid_Send_String>
 4c0:	f1 cf       	rjmp	.-30     	; 0x4a4 <main+0x5c>
		}
		
		else if(Loc_u8_val == 4){
 4c2:	84 30       	cpi	r24, 0x04	; 4
 4c4:	59 f4       	brne	.+22     	; 0x4dc <main+0x94>
			UART_Vid_TX('L');
 4c6:	8c e4       	ldi	r24, 0x4C	; 76
 4c8:	0e 94 61 03 	call	0x6c2	; 0x6c2 <UART_Vid_TX>
			LCD_Vid_Send_Command(LCD_CLR);
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	0e 94 be 01 	call	0x37c	; 0x37c <LCD_Vid_Send_Command>
			LCD_Vid_Send_String("left");
 4d2:	83 e8       	ldi	r24, 0x83	; 131
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 11 02 	call	0x422	; 0x422 <LCD_Vid_Send_String>
 4da:	e4 cf       	rjmp	.-56     	; 0x4a4 <main+0x5c>
		}
		
		else if(Loc_u8_val == 6){
 4dc:	86 30       	cpi	r24, 0x06	; 6
 4de:	59 f4       	brne	.+22     	; 0x4f6 <main+0xae>
			
			UART_Vid_TX('R');
 4e0:	82 e5       	ldi	r24, 0x52	; 82
 4e2:	0e 94 61 03 	call	0x6c2	; 0x6c2 <UART_Vid_TX>
			LCD_Vid_Send_Command(LCD_CLR);
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	0e 94 be 01 	call	0x37c	; 0x37c <LCD_Vid_Send_Command>
			LCD_Vid_Send_String("right");
 4ec:	88 e8       	ldi	r24, 0x88	; 136
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	0e 94 11 02 	call	0x422	; 0x422 <LCD_Vid_Send_String>
 4f4:	d7 cf       	rjmp	.-82     	; 0x4a4 <main+0x5c>
		}
		
		else if(Loc_u8_val == 8){
 4f6:	88 30       	cpi	r24, 0x08	; 8
 4f8:	59 f4       	brne	.+22     	; 0x510 <main+0xc8>
			UART_Vid_TX('B');
 4fa:	82 e4       	ldi	r24, 0x42	; 66
 4fc:	0e 94 61 03 	call	0x6c2	; 0x6c2 <UART_Vid_TX>
			LCD_Vid_Send_Command(LCD_CLR);
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	0e 94 be 01 	call	0x37c	; 0x37c <LCD_Vid_Send_Command>
			LCD_Vid_Send_String("backward");
 506:	8e e8       	ldi	r24, 0x8E	; 142
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	0e 94 11 02 	call	0x422	; 0x422 <LCD_Vid_Send_String>
 50e:	ca cf       	rjmp	.-108    	; 0x4a4 <main+0x5c>
		}
		
		else if(Loc_u8_val == 5){
 510:	85 30       	cpi	r24, 0x05	; 5
 512:	41 f6       	brne	.-112    	; 0x4a4 <main+0x5c>
			UART_Vid_TX('S');
 514:	83 e5       	ldi	r24, 0x53	; 83
 516:	0e 94 61 03 	call	0x6c2	; 0x6c2 <UART_Vid_TX>
			LCD_Vid_Send_Command(LCD_CLR);
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	0e 94 be 01 	call	0x37c	; 0x37c <LCD_Vid_Send_Command>
			LCD_Vid_Send_String("stop");
 520:	87 e9       	ldi	r24, 0x97	; 151
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 11 02 	call	0x422	; 0x422 <LCD_Vid_Send_String>
 528:	bd cf       	rjmp	.-134    	; 0x4a4 <main+0x5c>

0000052a <KEYPAD_Vid_Init>:
	                     {1,2,3,'a'},
						 {4,5,6,'b'} ,
						 {7,8,9,'c'},
						 {'a',0,'#','d'}	
};
void KEYPAD_Vid_Init(){
 52a:	0f 93       	push	r16
 52c:	1f 93       	push	r17
 52e:	cf 93       	push	r28
 530:	df 93       	push	r29
 532:	cd b7       	in	r28, 0x3d	; 61
 534:	de b7       	in	r29, 0x3e	; 62
 536:	28 97       	sbiw	r28, 0x08	; 8
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	f8 94       	cli
 53c:	de bf       	out	0x3e, r29	; 62
 53e:	0f be       	out	0x3f, r0	; 63
 540:	cd bf       	out	0x3d, r28	; 61
	
	u8 Loc_u8_col_arr[4]={KEYPAD_COL0_PIN,KEYPAD_COL1_PIN,KEYPAD_COL2_PIN,KEYPAD_COL3_PIN}; 
 542:	24 e0       	ldi	r18, 0x04	; 4
 544:	29 83       	std	Y+1, r18	; 0x01
 546:	95 e0       	ldi	r25, 0x05	; 5
 548:	9a 83       	std	Y+2, r25	; 0x02
 54a:	86 e0       	ldi	r24, 0x06	; 6
 54c:	8b 83       	std	Y+3, r24	; 0x03
 54e:	37 e0       	ldi	r19, 0x07	; 7
 550:	3c 83       	std	Y+4, r19	; 0x04
	u8 Loc_u8_row_arr[4]={KEYPAD_ROW0_PIN,KEYPAD_ROW1_PIN,KEYPAD_ROW2_PIN,KEYPAD_ROW3_PIN} ; 
 552:	33 e0       	ldi	r19, 0x03	; 3
 554:	3d 83       	std	Y+5, r19	; 0x05
 556:	2e 83       	std	Y+6, r18	; 0x06
 558:	9f 83       	std	Y+7, r25	; 0x07
 55a:	88 87       	std	Y+8, r24	; 0x08
	u8 Loc_u8_in=0 ;
	         /*  initialization COL   */
	for(Loc_u8_in=0;Loc_u8_in<4;Loc_u8_in++){
 55c:	10 e0       	ldi	r17, 0x00	; 0
 55e:	12 c0       	rjmp	.+36     	; 0x584 <KEYPAD_Vid_Init+0x5a>
	
	         DIO_Vid_Set_Pin_Dir(KEYPAD_COL_PORT,Loc_u8_col_arr[Loc_u8_in],OUTPUT) ;
 560:	e1 e0       	ldi	r30, 0x01	; 1
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	ec 0f       	add	r30, r28
 566:	fd 1f       	adc	r31, r29
 568:	e1 0f       	add	r30, r17
 56a:	f1 1d       	adc	r31, r1
 56c:	00 81       	ld	r16, Z
 56e:	41 e0       	ldi	r20, 0x01	; 1
 570:	60 2f       	mov	r22, r16
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Vid_Set_Pin_Dir>
	         DIO_Vid_Set_Pin_Val(KEYPAD_COL_PORT,Loc_u8_col_arr[Loc_u8_in],HIGH) ; 
 578:	41 e0       	ldi	r20, 0x01	; 1
 57a:	60 2f       	mov	r22, r16
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_Vid_Set_Pin_Val>
	
	u8 Loc_u8_col_arr[4]={KEYPAD_COL0_PIN,KEYPAD_COL1_PIN,KEYPAD_COL2_PIN,KEYPAD_COL3_PIN}; 
	u8 Loc_u8_row_arr[4]={KEYPAD_ROW0_PIN,KEYPAD_ROW1_PIN,KEYPAD_ROW2_PIN,KEYPAD_ROW3_PIN} ; 
	u8 Loc_u8_in=0 ;
	         /*  initialization COL   */
	for(Loc_u8_in=0;Loc_u8_in<4;Loc_u8_in++){
 582:	1f 5f       	subi	r17, 0xFF	; 255
 584:	14 30       	cpi	r17, 0x04	; 4
 586:	60 f3       	brcs	.-40     	; 0x560 <KEYPAD_Vid_Init+0x36>
 588:	10 e0       	ldi	r17, 0x00	; 0
 58a:	12 c0       	rjmp	.+36     	; 0x5b0 <KEYPAD_Vid_Init+0x86>
	}	
			         /*  initialization ROW   */
					 
	for(Loc_u8_in=0;Loc_u8_in<4;Loc_u8_in++){
				         
		    DIO_Vid_Set_Pin_Dir(KEYPAD_ROW_PORT,Loc_u8_row_arr[Loc_u8_in],INPUT) ;
 58c:	e5 e0       	ldi	r30, 0x05	; 5
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	ec 0f       	add	r30, r28
 592:	fd 1f       	adc	r31, r29
 594:	e1 0f       	add	r30, r17
 596:	f1 1d       	adc	r31, r1
 598:	00 81       	ld	r16, Z
 59a:	40 e0       	ldi	r20, 0x00	; 0
 59c:	60 2f       	mov	r22, r16
 59e:	82 e0       	ldi	r24, 0x02	; 2
 5a0:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Vid_Set_Pin_Dir>
						 /* active pull up resistor */
		    DIO_Vid_Set_Pin_Val(KEYPAD_ROW_PORT,Loc_u8_row_arr[Loc_u8_in],HIGH) ;
 5a4:	41 e0       	ldi	r20, 0x01	; 1
 5a6:	60 2f       	mov	r22, r16
 5a8:	82 e0       	ldi	r24, 0x02	; 2
 5aa:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_Vid_Set_Pin_Val>
	         DIO_Vid_Set_Pin_Val(KEYPAD_COL_PORT,Loc_u8_col_arr[Loc_u8_in],HIGH) ; 
	
	}	
			         /*  initialization ROW   */
					 
	for(Loc_u8_in=0;Loc_u8_in<4;Loc_u8_in++){
 5ae:	1f 5f       	subi	r17, 0xFF	; 255
 5b0:	14 30       	cpi	r17, 0x04	; 4
 5b2:	60 f3       	brcs	.-40     	; 0x58c <KEYPAD_Vid_Init+0x62>
			         }
			         
	
	
	
}
 5b4:	28 96       	adiw	r28, 0x08	; 8
 5b6:	0f b6       	in	r0, 0x3f	; 63
 5b8:	f8 94       	cli
 5ba:	de bf       	out	0x3e, r29	; 62
 5bc:	0f be       	out	0x3f, r0	; 63
 5be:	cd bf       	out	0x3d, r28	; 61
 5c0:	df 91       	pop	r29
 5c2:	cf 91       	pop	r28
 5c4:	1f 91       	pop	r17
 5c6:	0f 91       	pop	r16
 5c8:	08 95       	ret

000005ca <KEYPAD_u8_Get_Key>:

u8 KEYPAD_u8_Get_Key(){
 5ca:	af 92       	push	r10
 5cc:	bf 92       	push	r11
 5ce:	cf 92       	push	r12
 5d0:	df 92       	push	r13
 5d2:	ef 92       	push	r14
 5d4:	ff 92       	push	r15
 5d6:	0f 93       	push	r16
 5d8:	1f 93       	push	r17
 5da:	cf 93       	push	r28
 5dc:	df 93       	push	r29
 5de:	cd b7       	in	r28, 0x3d	; 61
 5e0:	de b7       	in	r29, 0x3e	; 62
 5e2:	28 97       	sbiw	r28, 0x08	; 8
 5e4:	0f b6       	in	r0, 0x3f	; 63
 5e6:	f8 94       	cli
 5e8:	de bf       	out	0x3e, r29	; 62
 5ea:	0f be       	out	0x3f, r0	; 63
 5ec:	cd bf       	out	0x3d, r28	; 61
	
	u8 Loc_u8_col_arr[4]={KEYPAD_COL0_PIN,KEYPAD_COL1_PIN,KEYPAD_COL2_PIN,KEYPAD_COL3_PIN};
 5ee:	24 e0       	ldi	r18, 0x04	; 4
 5f0:	29 83       	std	Y+1, r18	; 0x01
 5f2:	95 e0       	ldi	r25, 0x05	; 5
 5f4:	9a 83       	std	Y+2, r25	; 0x02
 5f6:	86 e0       	ldi	r24, 0x06	; 6
 5f8:	8b 83       	std	Y+3, r24	; 0x03
 5fa:	37 e0       	ldi	r19, 0x07	; 7
 5fc:	3c 83       	std	Y+4, r19	; 0x04
	u8 Loc_u8_row_arr[4]={KEYPAD_ROW0_PIN,KEYPAD_ROW1_PIN,KEYPAD_ROW2_PIN,KEYPAD_ROW3_PIN} ;
 5fe:	33 e0       	ldi	r19, 0x03	; 3
 600:	3d 83       	std	Y+5, r19	; 0x05
 602:	2e 83       	std	Y+6, r18	; 0x06
 604:	9f 83       	std	Y+7, r25	; 0x07
 606:	88 87       	std	Y+8, r24	; 0x08
	u8 Loc_u8_row=0 ; 
    u8 Loc_u8_col=0 ;	
	u8 Loc_u8_val=0xff  ;
	for(Loc_u8_col=0 ;Loc_u8_col<4;Loc_u8_col++){
 608:	b1 2c       	mov	r11, r1
 60a:	3b c0       	rjmp	.+118    	; 0x682 <KEYPAD_u8_Get_Key+0xb8>
		
		/* ACTVIE COL(N) ---> low */
		DIO_Vid_Set_Pin_Val(KEYPAD_COL_PORT,Loc_u8_col_arr[Loc_u8_col],LOW) ; 
 60c:	cb 2c       	mov	r12, r11
 60e:	d1 2c       	mov	r13, r1
 610:	e1 e0       	ldi	r30, 0x01	; 1
 612:	f0 e0       	ldi	r31, 0x00	; 0
 614:	ec 0f       	add	r30, r28
 616:	fd 1f       	adc	r31, r29
 618:	ec 0d       	add	r30, r12
 61a:	fd 1d       	adc	r31, r13
 61c:	a0 80       	ld	r10, Z
 61e:	40 e0       	ldi	r20, 0x00	; 0
 620:	6a 2d       	mov	r22, r10
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_Vid_Set_Pin_Val>
		/* check if any button is pre*/
		for(Loc_u8_row=0 ; Loc_u8_row<4 ;Loc_u8_row++){
 628:	10 e0       	ldi	r17, 0x00	; 0
 62a:	23 c0       	rjmp	.+70     	; 0x672 <KEYPAD_u8_Get_Key+0xa8>
			
			if(DIO_u8_Get_Pin_Val(KEYPAD_ROW_PORT,Loc_u8_row_arr[Loc_u8_row])==0){
 62c:	e1 2e       	mov	r14, r17
 62e:	f1 2c       	mov	r15, r1
 630:	e5 e0       	ldi	r30, 0x05	; 5
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	ec 0f       	add	r30, r28
 636:	fd 1f       	adc	r31, r29
 638:	ee 0d       	add	r30, r14
 63a:	ff 1d       	adc	r31, r15
 63c:	00 81       	ld	r16, Z
 63e:	60 2f       	mov	r22, r16
 640:	82 e0       	ldi	r24, 0x02	; 2
 642:	0e 94 23 01 	call	0x246	; 0x246 <DIO_u8_Get_Pin_Val>
 646:	81 11       	cpse	r24, r1
 648:	13 c0       	rjmp	.+38     	; 0x670 <KEYPAD_u8_Get_Key+0xa6>
				
				   /* get value  */
				Loc_u8_val=KEYPAD_Data[Loc_u8_row][Loc_u8_col] ;
 64a:	c7 01       	movw	r24, r14
 64c:	88 0f       	add	r24, r24
 64e:	99 1f       	adc	r25, r25
 650:	88 0f       	add	r24, r24
 652:	99 1f       	adc	r25, r25
 654:	80 5a       	subi	r24, 0xA0	; 160
 656:	9f 4f       	sbci	r25, 0xFF	; 255
 658:	fc 01       	movw	r30, r24
 65a:	ec 0d       	add	r30, r12
 65c:	fd 1d       	adc	r31, r13
 65e:	10 81       	ld	r17, Z
				          /* busy wait  */
				while(DIO_u8_Get_Pin_Val(KEYPAD_ROW_PORT,Loc_u8_row_arr[Loc_u8_row])==0) ; 
 660:	60 2f       	mov	r22, r16
 662:	82 e0       	ldi	r24, 0x02	; 2
 664:	0e 94 23 01 	call	0x246	; 0x246 <DIO_u8_Get_Pin_Val>
 668:	88 23       	and	r24, r24
 66a:	d1 f3       	breq	.-12     	; 0x660 <KEYPAD_u8_Get_Key+0x96>
				return Loc_u8_val ; 
 66c:	81 2f       	mov	r24, r17
 66e:	0d c0       	rjmp	.+26     	; 0x68a <KEYPAD_u8_Get_Key+0xc0>
	for(Loc_u8_col=0 ;Loc_u8_col<4;Loc_u8_col++){
		
		/* ACTVIE COL(N) ---> low */
		DIO_Vid_Set_Pin_Val(KEYPAD_COL_PORT,Loc_u8_col_arr[Loc_u8_col],LOW) ; 
		/* check if any button is pre*/
		for(Loc_u8_row=0 ; Loc_u8_row<4 ;Loc_u8_row++){
 670:	1f 5f       	subi	r17, 0xFF	; 255
 672:	14 30       	cpi	r17, 0x04	; 4
 674:	d8 f2       	brcs	.-74     	; 0x62c <KEYPAD_u8_Get_Key+0x62>
				while(DIO_u8_Get_Pin_Val(KEYPAD_ROW_PORT,Loc_u8_row_arr[Loc_u8_row])==0) ; 
				return Loc_u8_val ; 
				
			}
		}
		DIO_Vid_Set_Pin_Val(KEYPAD_COL_PORT,Loc_u8_col_arr[Loc_u8_col],HIGH) ; 
 676:	41 e0       	ldi	r20, 0x01	; 1
 678:	6a 2d       	mov	r22, r10
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_Vid_Set_Pin_Val>
	u8 Loc_u8_col_arr[4]={KEYPAD_COL0_PIN,KEYPAD_COL1_PIN,KEYPAD_COL2_PIN,KEYPAD_COL3_PIN};
	u8 Loc_u8_row_arr[4]={KEYPAD_ROW0_PIN,KEYPAD_ROW1_PIN,KEYPAD_ROW2_PIN,KEYPAD_ROW3_PIN} ;
	u8 Loc_u8_row=0 ; 
    u8 Loc_u8_col=0 ;	
	u8 Loc_u8_val=0xff  ;
	for(Loc_u8_col=0 ;Loc_u8_col<4;Loc_u8_col++){
 680:	b3 94       	inc	r11
 682:	83 e0       	ldi	r24, 0x03	; 3
 684:	8b 15       	cp	r24, r11
 686:	10 f6       	brcc	.-124    	; 0x60c <KEYPAD_u8_Get_Key+0x42>
		
		
	}
	
	
	return Loc_u8_val   ;
 688:	8f ef       	ldi	r24, 0xFF	; 255
	
 68a:	28 96       	adiw	r28, 0x08	; 8
 68c:	0f b6       	in	r0, 0x3f	; 63
 68e:	f8 94       	cli
 690:	de bf       	out	0x3e, r29	; 62
 692:	0f be       	out	0x3f, r0	; 63
 694:	cd bf       	out	0x3d, r28	; 61
 696:	df 91       	pop	r29
 698:	cf 91       	pop	r28
 69a:	1f 91       	pop	r17
 69c:	0f 91       	pop	r16
 69e:	ff 90       	pop	r15
 6a0:	ef 90       	pop	r14
 6a2:	df 90       	pop	r13
 6a4:	cf 90       	pop	r12
 6a6:	bf 90       	pop	r11
 6a8:	af 90       	pop	r10
 6aa:	08 95       	ret

000006ac <UART_Vid_Init>:
	//send 8-bit data
	u8 Loc_u8_temp=0;
	SET_BIT(Loc_u8_temp,7);
	SET_BIT(Loc_u8_temp,2);
	SET_BIT(Loc_u8_temp,1);
	UCSRC_REG=Loc_u8_temp;
 6ac:	86 e8       	ldi	r24, 0x86	; 134
 6ae:	80 bd       	out	0x20, r24	; 32
	
	//set buad rate 9600 : 16MHZ
	UBRRL_REG=103;
 6b0:	87 e6       	ldi	r24, 0x67	; 103
 6b2:	89 b9       	out	0x09, r24	; 9
	
	//enable RX
	SET_BIT(UCSRB_REG,4);
 6b4:	8a b1       	in	r24, 0x0a	; 10
 6b6:	80 61       	ori	r24, 0x10	; 16
 6b8:	8a b9       	out	0x0a, r24	; 10
	//enable TX
	SET_BIT(UCSRB_REG,3);
 6ba:	8a b1       	in	r24, 0x0a	; 10
 6bc:	88 60       	ori	r24, 0x08	; 8
 6be:	8a b9       	out	0x0a, r24	; 10
 6c0:	08 95       	ret

000006c2 <UART_Vid_TX>:
	
}

void UART_Vid_TX(u8 copy_u8_data){
	
	UDR_REG=copy_u8_data;
 6c2:	8c b9       	out	0x0c, r24	; 12
	while (GET_BIT(UCSRA_REG,5)==0);
 6c4:	5d 9b       	sbis	0x0b, 5	; 11
 6c6:	fe cf       	rjmp	.-4      	; 0x6c4 <UART_Vid_TX+0x2>
	
}
 6c8:	08 95       	ret

000006ca <_exit>:
 6ca:	f8 94       	cli

000006cc <__stop_program>:
 6cc:	ff cf       	rjmp	.-2      	; 0x6cc <__stop_program>
