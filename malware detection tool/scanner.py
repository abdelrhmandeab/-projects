from PyQt5.QtCore import QObject, pyqtSignal, pyqtSlot
from peframe_analyzer import analyze_with_peframe
from hybrid_analysis import analyze_with_hybrid
from ml_analyzer import analyze_with_ml
import concurrent.futures
import os

class FileScanner(QObject):
    progress_updated = pyqtSignal(int)
    scan_complete = pyqtSignal(dict)

    def __init__(self):
        super().__init__()
        self.executor = concurrent.futures.ThreadPoolExecutor(max_workers=4)

    @pyqtSlot(list)
    def scan_files(self, file_paths):
        results = {}
        total_files = len(file_paths)

        def scan_file(file_path, idx):
            try:
                file_results = {
                    'peframe': analyze_with_peframe(file_path),
                    'hybrid': analyze_with_hybrid(file_path),
                    'ml': analyze_with_ml(file_path)
                }
                return (idx, file_path, file_results)
            except Exception as e:
                return (idx, file_path, {'error': str(e)})

        futures = []
        for idx, file_path in enumerate(file_paths):
            futures.append(self.executor.submit(scan_file, file_path, idx))

        completed = 0
        for future in concurrent.futures.as_completed(futures):
            idx, file_path, file_results = future.result()
            results[file_path] = file_results
            completed += 1
            progress = int((completed / total_files) * 100)
            self.progress_updated.emit(progress)

        self.scan_complete.emit(results)