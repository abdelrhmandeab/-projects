from PyQt5.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
                             QPushButton, QLabel, QFileDialog, QListWidget,
                             QProgressBar, QMessageBox, QTextEdit, QTabWidget)
from PyQt5.QtCore import Qt, pyqtSignal
from PyQt5.QtPrintSupport import QPrinter, QPrintPreviewDialog
from scanner import FileScanner
from report_generator import generate_report
import os
import tempfile
from datetime import datetime


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Malware Analysis Tool")
        self.setGeometry(100, 100, 1000, 800)

        # Main widget and layout
        self.main_widget = QWidget()
        self.setCentralWidget(self.main_widget)
        self.layout = QVBoxLayout()
        self.main_widget.setLayout(self.layout)

        # Create tab widget
        self.tabs = QTabWidget()
        self.layout.addWidget(self.tabs)

        # Scan Tab
        self.scan_tab = QWidget()
        self.scan_layout = QVBoxLayout()
        self.scan_tab.setLayout(self.scan_layout)
        self.tabs.addTab(self.scan_tab, "Scan File")

        # Report Preview Tab
        self.report_tab = QWidget()
        self.report_layout = QVBoxLayout()
        self.report_tab.setLayout(self.report_layout)
        self.tabs.addTab(self.report_tab, "Report Preview")
        self.tabs.setTabEnabled(1, False)  # Disable report tab initially

        # Initialize scan tab components
        self.setup_scan_tab()

        # Initialize report preview tab
        self.setup_report_tab()

        # Scanner instance
        self.scanner = FileScanner()
        self.scanner.progress_updated.connect(self.update_progress)
        self.scanner.scan_complete.connect(self.scan_completed)

        self.current_file = None
        self.scan_results = None

    def setup_scan_tab(self):
        """Setup components for the scan tab"""
        # File selection
        self.file_layout = QHBoxLayout()
        self.file_label = QLabel("Selected File: None")
        self.file_button = QPushButton("Browse File")
        self.file_button.clicked.connect(self.select_file)
        self.file_layout.addWidget(self.file_label)
        self.file_layout.addWidget(self.file_button)
        self.scan_layout.addLayout(self.file_layout)

        # File list
        self.file_list = QListWidget()
        self.scan_layout.addWidget(QLabel("Selected File:"))
        self.scan_layout.addWidget(self.file_list)

        # Scan controls
        self.scan_button = QPushButton("Scan File")
        self.scan_button.clicked.connect(self.scan_files)
        self.scan_button.setEnabled(False)
        self.scan_layout.addWidget(self.scan_button)

        # Progress
        self.progress = QProgressBar()
        self.scan_layout.addWidget(self.progress)

        # Generate Report button
        self.preview_button = QPushButton("Preview Report")
        self.preview_button.clicked.connect(self.preview_report)
        self.preview_button.setEnabled(False)
        self.scan_layout.addWidget(self.preview_button)

    def setup_report_tab(self):
        """Setup components for the report preview tab"""
        # Report preview area
        self.report_preview = QTextEdit()
        self.report_preview.setReadOnly(True)
        self.report_layout.addWidget(self.report_preview)

        # Report actions
        self.report_actions = QHBoxLayout()

        self.print_preview_button = QPushButton("Print Preview")
        self.print_preview_button.clicked.connect(self.show_print_preview)
        self.report_actions.addWidget(self.print_preview_button)

        self.save_pdf_button = QPushButton("Save as PDF")
        self.save_pdf_button.clicked.connect(self.save_report_pdf)
        self.report_actions.addWidget(self.save_pdf_button)

        self.report_layout.addLayout(self.report_actions)

    def select_file(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "Select File", "", "Executable Files (*.exe *.dll *.sys);;All Files (*)")
        if file_path:
            self.current_file = file_path
            self.file_label.setText(f"Selected File: {file_path}")
            self.populate_file_list(file_path)
            self.scan_button.setEnabled(True)

    def populate_file_list(self, file_path):
        self.file_list.clear()
        if os.path.isfile(file_path):
            self.file_list.addItem(file_path)

    def scan_files(self):
        if not self.current_file:
            return

        file_paths = [self.current_file]

        self.scan_button.setEnabled(False)
        self.progress.setValue(0)
        self.scanner.scan_files(file_paths)

    def update_progress(self, value):
        self.progress.setValue(value)

    def scan_completed(self, results):
        self.scan_results = results
        self.preview_button.setEnabled(True)
        QMessageBox.information(self, "Scan Complete", "File scanning has completed successfully!")

    def preview_report(self):
        """Generate and display HTML preview of the report"""
        if not self.scan_results:
            QMessageBox.warning(self, "No Results", "No scan results available to generate report")
            return

        # Generate temporary HTML report
        html_report = self.generate_html_report(self.scan_results)

        # Display in preview tab
        self.report_preview.setHtml(html_report)
        self.tabs.setTabEnabled(1, True)
        self.tabs.setCurrentIndex(1)

    def generate_html_report(self, scan_results):
        """Generate HTML version of the report for preview"""
        html = """
        <html>
        <head>
        <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            h1 { color: #003366; text-align: center; }
            h2 { color: #0066cc; border-bottom: 1px solid #ddd; padding-bottom: 5px; }
            h3 { color: #0099ff; }
            h4 { color: #666; }
            table { border-collapse: collapse; width: 100%; margin-bottom: 20px; }
            th { background-color: #f2f2f2; text-align: left; padding: 8px; }
            td { border: 1px solid #ddd; padding: 8px; }
            .malicious { color: red; font-weight: bold; }
            .clean { color: green; }
            .suspicious { color: orange; }
            .error { color: red; font-style: italic; }
        </style>
        </head>
        <body>
        """

        # Title and metadata
        html += f"<h1>Malware Analysis Report</h1>"
        html += f"<p>Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>"

        # Summary section
        total_files = len(scan_results)
        malicious_count = sum(1 for res in scan_results.values()
                              if res.get('ml', {}).get('prediction') == 'malicious' or
                              res.get('peframe', {}).get('indicators', {}).get('suspicious_imports') or
                              res.get('hybrid', {}).get('score', 0) > 5)

        html += "<h2>Scan Summary</h2>"
        html += f"<p>Total Files Scanned: {total_files}</p>"
        html += f"<p>Potential Malicious Files: {malicious_count}</p>"
        html += f"<p>Percentage Suspicious: {(malicious_count / total_files) * 100:.2f}%</p>"

        # Detailed results
        html += "<h2>Detailed File Analysis</h2>"

        for file_path, results in scan_results.items():
            file_name = os.path.basename(file_path)
            html += f"<h3>File: {file_name}</h3>"
            html += f"<p>Path: {file_path}</p>"

            # PEframe results
            if 'peframe' in results:
                peframe = results['peframe']
                html += "<h4>Static Analysis (PEframe)</h4>"

                if 'error' in peframe:
                    html += f"<p class='error'>Error: {peframe['error']}</p>"
                else:
                    # File info
                    file_info = peframe.get('file_info', {})
                    html += """
                    <table>
                        <tr><th>Property</th><th>Value</th></tr>
                        <tr><td>File Type</td><td>{file_type}</td></tr>
                        <tr><td>File Size</td><td>{file_size:,} bytes</td></tr>
                        <tr><td>MD5</td><td>{md5}</td></tr>
                        <tr><td>SHA256</td><td>{sha256}</td></tr>
                    </table>
                    """.format(**file_info)

                    # Sections
                    pe_info = peframe.get('pe_info', {})
                    sections = pe_info.get('sections', [])
                    if sections:
                        html += "<h4>Sections</h4>"
                        html += "<table><tr><th>Name</th><th>Virtual Size</th><th>Raw Size</th><th>Entropy</th></tr>"
                        for section in sections:
                            html += f"<tr><td>{section.get('name', 'N/A')}</td><td>{section.get('virtual_size', 0):,}</td><td>{section.get('raw_size', 0):,}</td><td>{section.get('entropy', 0):.2f}</td></tr>"
                        html += "</table>"

                    # Imports
                    imports = pe_info.get('imports', [])
                    if imports:
                        html += "<h4>Imported DLLs and Functions</h4>"
                        html += "<table><tr><th>DLL</th><th>Functions</th></tr>"
                        for imp in imports:
                            dll = imp.get('dll', 'N/A')
                            functions = ', '.join(imp.get('functions', []) or ['None'])
                            html += f"<tr><td>{dll}</td><td>{functions}</td></tr>"
                        html += "</table>"

                    # Indicators
                    indicators = peframe.get('indicators', {})
                    if any(indicators.values()):
                        html += "<h4>Malware Indicators</h4>"
                        html += "<table><tr><th>Indicator</th><th>Present</th></tr>"
                        for name, value in indicators.items():
                            html += f"<tr><td>{name.replace('_', ' ').title()}</td><td>{'✓' if value else '✗'}</td></tr>"
                        html += "</table>"

            # Hybrid Analysis results
            if 'hybrid' in results:
                hybrid = results['hybrid']
                html += "<h4>Dynamic Analysis (Hybrid Analysis)</h4>"

                if 'error' in hybrid:
                    html += f"<p class='error'>Error: {hybrid['error']}</p>"
                else:
                    verdict = hybrid.get('verdict', 'unknown').title()
                    score = hybrid.get('score', 0)
                    verdict_class = "malicious" if verdict.lower() == 'malicious' else (
                        "suspicious" if verdict.lower() == 'suspicious' else "clean")

                    html += f"""
                    <table>
                        <tr><th>Verdict</th><td class="{verdict_class}">{verdict}</td></tr>
                        <tr><th>Threat Score</th><td>{score}/100</td></tr>
                    </table>
                    """

                    # Signatures
                    if hybrid.get('signatures'):
                        html += "<h4>Detected Behaviors</h4>"
                        html += "<table><tr><th>Behavior</th><th>Severity</th></tr>"
                        for sig in hybrid['signatures'][:5]:
                            html += f"<tr><td>{sig.get('name', 'N/A')}</td><td>{sig.get('severity', 'N/A')}</td></tr>"
                        html += "</table>"

                    # MITRE ATT&CK
                    if hybrid.get('mitre_attacks'):
                        html += "<h4>MITRE ATT&CK Techniques</h4>"
                        html += "<table><tr><th>Technique</th><th>Tactic</th></tr>"
                        for attack in hybrid['mitre_attacks'][:5]:
                            html += f"<tr><td>{attack.get('technique', 'N/A')}</td><td>{attack.get('tactic', 'N/A')}</td></tr>"
                        html += "</table>"

            # ML results
            if 'ml' in results:
                ml = results['ml']
                html += "<h4>Machine Learning Analysis</h4>"

                if 'error' in ml:
                    html += f"<p class='error'>Error: {ml['error']}</p>"
                else:
                    prediction = ml.get('prediction', 'unknown').title()
                    confidence = ml.get('confidence', 0)
                    pred_class = "malicious" if prediction.lower() == 'malicious' else "clean"

                    html += f"""
                    <table>
                        <tr><th>Prediction</th><td class="{pred_class}">{prediction}</td></tr>
                        <tr><th>Confidence</th><td>{confidence * 100:.2f}%</td></tr>
                    </table>
                    """

            html += "<hr>"

        html += "</body></html>"
        return html

    def show_print_preview(self):
        """Show print preview dialog"""
        if not hasattr(self, 'scan_results') or not self.scan_results:
            QMessageBox.warning(self, "No Results", "No scan results available to print")
            return

        printer = QPrinter(QPrinter.HighResolution)
        preview = QPrintPreviewDialog(printer, self)
        preview.paintRequested.connect(self.print_report)
        preview.exec_()

    def print_report(self, printer):
        """Generate report for printing"""
        if not hasattr(self, 'scan_results') or not self.scan_results:
            return

        # Create temporary PDF
        temp_pdf = tempfile.NamedTemporaryFile(suffix='.pdf', delete=False)
        generate_report(self.scan_results, temp_pdf.name)
        temp_pdf.close()

        # Print the PDF
        from PyQt5.QtGui import QPdfDocument
        doc = QPdfDocument()
        doc.load(temp_pdf.name)

        from PyQt5.QtGui import QPainter
        painter = QPainter()
        painter.begin(printer)

        # Scale the painter to fit the page
        xscale = printer.pageRect().width() / doc.page(0).width()
        yscale = printer.pageRect().height() / doc.page(0).height()
        scale = min(xscale, yscale)
        painter.scale(scale, scale)

        # Render each page
        for i in range(doc.pageCount()):
            if i > 0:
                printer.newPage()
            page = doc.page(i)
            painter.drawPixmap(0, 0, page.renderToPixmap())

        painter.end()
        os.unlink(temp_pdf.name)

    def save_report_pdf(self):
        """Save the report as PDF"""
        if not hasattr(self, 'scan_results') or not self.scan_results:
            QMessageBox.warning(self, "No Results", "No scan results available to generate report")
            return

        save_path, _ = QFileDialog.getSaveFileName(
            self,
            "Save Report",
            "",
            "PDF Files (*.pdf)"
        )

        if save_path:
            if not save_path.lower().endswith('.pdf'):
                save_path += '.pdf'

            success = generate_report(self.scan_results, save_path)
            if success:
                QMessageBox.information(
                    self,
                    "Report Generated",
                    f"Report successfully saved to:\n{save_path}"
                )
            else:
                QMessageBox.critical(
                    self,
                    "Report Generation Failed",
                    "Failed to generate the report. Check console for details."
                )