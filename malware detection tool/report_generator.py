from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from reportlab.lib.units import inch
import matplotlib.pyplot as plt
import io
import os
import logging
from datetime import datetime

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def generate_report(scan_results, output_path):
    """
    Generate a PDF report from malware scan results.

    Args:
        scan_results (dict): Dictionary containing scan results for each file
        output_path (str): Path to save the PDF report

    Returns:
        bool: True if report generation succeeded, False otherwise
    """
    try:
        logger.info(f"Starting report generation for {len(scan_results)} files")

        # Validate inputs
        if not scan_results or not isinstance(scan_results, dict):
            logger.error("Invalid scan results provided")
            return False

        if not output_path:
            logger.error("No output path specified")
            return False

        # Ensure PDF extension
        if not output_path.lower().endswith('.pdf'):
            output_path += '.pdf'

        # Create PDF document with metadata
        doc = SimpleDocTemplate(
            output_path,
            pagesize=letter,
            title="Malware Analysis Report",
            author="Malware Analysis Tool",
            subject="Scan Results",
            creator="Malware Analysis Tool v1.0"
        )

        styles = getSampleStyleSheet()
        story = []

        # Add document title and metadata
        add_title_section(story, styles)

        # Add summary section
        add_summary_section(story, styles, scan_results)

        # Add detailed analysis for each file
        add_file_analysis_sections(story, styles, scan_results)

        # Add footer with timestamp
        add_footer_section(story, styles)

        # Build the document
        doc.build(story)
        logger.info(f"Report successfully generated at {output_path}")
        return True

    except Exception as e:
        logger.error(f"Failed to generate report: {str(e)}", exc_info=True)
        return False


def add_title_section(story, styles):
    """Add title and header information to the report"""
    title_style = ParagraphStyle(
        'Title',
        parent=styles['Heading1'],
        fontSize=18,
        alignment=1,
        spaceAfter=20,
        textColor=colors.HexColor('#003366')
    )

    subtitle_style = ParagraphStyle(
        'Subtitle',
        parent=styles['Normal'],
        fontSize=10,
        alignment=1,
        spaceAfter=20
    )

    story.append(Paragraph("Malware Analysis Report", title_style))
    story.append(Paragraph("Comprehensive Security Assessment", styles['Heading2']))
    story.append(Spacer(1, 0.25 * inch))


def add_summary_section(story, styles, scan_results):
    """Add summary statistics and charts to the report"""
    story.append(Paragraph("Scan Summary", styles['Heading2']))

    total_files = len(scan_results)
    malicious_count = sum(1 for res in scan_results.values() if is_file_malicious(res))

    # Protection against division by zero
    suspicious_percent = (malicious_count / total_files * 100) if total_files > 0 else 0

    summary_data = [
        ["Total Files Scanned:", str(total_files)],
        ["Potential Malicious Files:", str(malicious_count)],
        ["Percentage Suspicious:", f"{suspicious_percent:.2f}%"]
    ]

    summary_table = Table(summary_data, colWidths=[2 * inch, 1 * inch])
    summary_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#E8E8E8')),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTSIZE', (0, 0), (-1, -1), 10)
    ]))
    story.append(summary_table)
    story.append(Spacer(1, 0.25 * inch))

    # Add summary visualization
    chart_img = create_summary_chart(total_files, malicious_count)
    if chart_img:
        story.append(Image(chart_img, width=4 * inch, height=3 * inch))
        story.append(Spacer(1, 0.5 * inch))


def add_file_analysis_sections(story, styles, scan_results):
    """Add detailed analysis sections for each scanned file"""
    story.append(Paragraph("Detailed File Analysis", styles['Heading2']))

    for file_path, results in scan_results.items():
        try:
            file_name = os.path.basename(file_path)
            story.append(Paragraph(f"File: {file_name}", styles['Heading3']))
            story.append(Paragraph(f"Path: {file_path}", styles['Normal']))

            # Add analysis results from each tool
            add_peframe_results(story, styles, results.get('peframe', {}))
            add_hybrid_results(story, styles, results.get('hybrid', {}))
            add_ml_results(story, styles, results.get('ml', {}))

            story.append(Spacer(1, 0.5 * inch))

        except Exception as e:
            logger.error(f"Error processing file {file_path}: {str(e)}")
            story.append(Paragraph(f"Error processing file: {str(e)}", styles['Normal']))


def add_peframe_results(story, styles, peframe_results):
    """Add PEframe static analysis results"""
    story.append(Paragraph("Static Analysis (PEframe)", styles['Heading4']))

    if 'error' in peframe_results:
        error_style = ParagraphStyle(
            'Error',
            parent=styles['Normal'],
            textColor=colors.red,
            fontSize=9,
            spaceAfter=10
        )
        story.append(Paragraph(f"Error: {peframe_results['error']}", error_style))
        return

    # File information table
    file_info = peframe_results.get('file_info', {})
    file_info_data = [
        ["File Type:", file_info.get('file_type', 'N/A')],
        ["File Size:", f"{file_info.get('file_size', 0):,} bytes"],
        ["MD5:", file_info.get('md5', 'N/A')],
        ["SHA256:", file_info.get('sha256', 'N/A')]
    ]

    file_info_table = Table(file_info_data, colWidths=[1.5 * inch, 4 * inch])
    file_info_table.setStyle(TableStyle([
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTSIZE', (0, 0), (-1, -1), 9)
    ]))
    story.append(file_info_table)
    story.append(Spacer(1, 0.1 * inch))

    # Sections table
    pe_info = peframe_results.get('pe_info', {})
    sections = pe_info.get('sections', [])
    if sections:
        story.append(Paragraph("Sections:", styles['Heading4']))
        sections_data = [["Name", "Virtual Size", "Raw Size", "Entropy"]]
        for section in sections:
            sections_data.append([
                section.get('name', 'N/A'),
                f"{section.get('virtual_size', 0):,}",
                f"{section.get('raw_size', 0):,}",
                f"{section.get('entropy', 0):.2f}"
            ])

        sections_table = Table(sections_data, colWidths=[1.5 * inch, 1.2 * inch, 1.2 * inch, 1.1 * inch])
        sections_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#E8E8E8')),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTSIZE', (0, 0), (-1, -1), 9)
        ]))
        story.append(sections_table)
        story.append(Spacer(1, 0.1 * inch))

    # Imports table
    imports = pe_info.get('imports', [])
    if imports:
        story.append(Paragraph("Imported DLLs and Functions:", styles['Heading4']))
        imports_data = [["DLL", "Functions"]]
        for imp in imports:
            dll = imp.get('dll', 'N/A')
            functions = ', '.join(imp.get('functions', []) or ['None'])
            imports_data.append([dll, functions])

        imports_table = Table(imports_data, colWidths=[1.5 * inch, 4 * inch])
        imports_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#E8E8E8')),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTSIZE', (0, 0), (-1, -1), 9)
        ]))
        story.append(imports_table)
        story.append(Spacer(1, 0.1 * inch))

    # Malware indicators
    indicators = peframe_results.get('indicators', {})
    if any(indicators.values()):
        story.append(Paragraph("Malware Indicators:", styles['Heading4']))
        indicator_data = [["Indicator", "Present"]]

        for name, value in indicators.items():
            indicator_data.append([
                name.replace('_', ' ').title(),
                "✓" if value else "✗"
            ])

        indicator_table = Table(indicator_data, colWidths=[2.5 * inch, 0.5 * inch])
        indicator_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#E8E8E8')),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTSIZE', (0, 0), (-1, -1), 9)
        ]))
        story.append(indicator_table)


def add_hybrid_results(story, styles, hybrid_results):
    """Add Hybrid Analysis dynamic analysis results"""
    story.append(Paragraph("Dynamic Analysis (Hybrid Analysis)", styles['Heading4']))

    if 'error' in hybrid_results:
        error_style = ParagraphStyle(
            'Error',
            parent=styles['Normal'],
            textColor=colors.red,
            fontSize=9,
            spaceAfter=10
        )
        story.append(Paragraph(f"Error: {hybrid_results['error']}", error_style))
        return

    # Verdict and score
    verdict = hybrid_results.get('verdict', 'unknown').title()
    score = hybrid_results.get('score', 0)

    verdict_color = colors.red if verdict.lower() == 'malicious' else (
        colors.orange if verdict.lower() == 'suspicious' else colors.green)

    verdict_data = [
        ["Verdict:", verdict],
        ["Threat Score:", f"{score}/100"]
    ]

    verdict_table = Table(verdict_data, colWidths=[1.5 * inch, 1 * inch])
    verdict_table.setStyle(TableStyle([
        ('TEXTCOLOR', (1, 0), (1, 0), verdict_color),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTSIZE', (0, 0), (-1, -1), 9)
    ]))
    story.append(verdict_table)

    # Detected behaviors
    if hybrid_results.get('signatures'):
        story.append(Paragraph("Detected Behaviors:", styles['Heading4']))
        sig_data = [["Behavior", "Severity"]]

        for sig in hybrid_results['signatures'][:5]:  # Limit to top 5
            sig_data.append([
                sig.get('name', 'N/A'),
                str(sig.get('severity', 'N/A'))
            ])

        sig_table = Table(sig_data, colWidths=[3.5 * inch, 1 * inch])
        sig_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#E8E8E8')),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTSIZE', (0, 0), (-1, -1), 9)
        ]))
        story.append(sig_table)

    # MITRE ATT&CK Techniques
    if hybrid_results.get('mitre_attacks'):
        story.append(Paragraph("MITRE ATT&CK Techniques:", styles['Heading4']))
        attack_data = [["Technique", "Tactic"]]

        for attack in hybrid_results['mitre_attacks'][:5]:  # Limit to top 5
            attack_data.append([
                attack.get('technique', 'N/A'),
                attack.get('tactic', 'N/A')
            ])

        attack_table = Table(attack_data, colWidths=[3 * inch, 2 * inch])
        attack_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#E8E8E8')),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTSIZE', (0, 0), (-1, -1), 9)
        ]))
        story.append(attack_table)


def add_ml_results(story, styles, ml_results):
    """Add machine learning analysis results"""
    story.append(Paragraph("Machine Learning Analysis:", styles['Heading4']))

    if 'error' in ml_results:
        error_style = ParagraphStyle(
            'Error',
            parent=styles['Normal'],
            textColor=colors.red,
            fontSize=9,
            spaceAfter=10
        )
        if ml_results['error'] == 'Model not available':
            story.append(Paragraph("ML Model: Not available in this version", error_style))
        else:
            story.append(Paragraph(f"Error: {ml_results['error']}", error_style))
    else:
        prediction = ml_results.get('prediction', 'unknown').title()
        confidence = ml_results.get('confidence', 0)
        pred_color = colors.red if prediction.lower() == 'malicious' else colors.green

        ml_data = [
            ["Prediction:", prediction],
            ["Confidence:", f"{confidence * 100:.2f}%"]
        ]

        ml_table = Table(ml_data, colWidths=[1.5 * inch, 1 * inch])
        ml_table.setStyle(TableStyle([
            ('TEXTCOLOR', (1, 0), (1, 0), pred_color),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT')
        ]))
        story.append(ml_table)


def add_footer_section(story, styles):
    """Add footer with timestamp and page number"""
    footer_style = ParagraphStyle(
        'Footer',
        parent=styles['Normal'],
        fontSize=8,
        alignment=2,
        spaceBefore=10
    )

    story.append(Spacer(1, 0.5 * inch))
    story.append(Paragraph(f"Report generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", footer_style))


def is_file_malicious(results):
    """Determine if a file is considered malicious based on all analysis results"""
    return (results.get('ml', {}).get('prediction') == 'malicious' or
            results.get('peframe', {}).get('indicators', {}).get('suspicious_imports') or
            results.get('hybrid', {}).get('verdict') in ['malicious', 'suspicious'] or
            results.get('hybrid', {}).get('score', 0) > 5)


def create_summary_chart(total_files, malicious_count):
    """Create a visualization of the analysis summary"""
    try:
        plt.figure(figsize=(6, 4))

        # Custom color scheme
        colors = ['#4CAF50', '#F44336']  # Green, Red
        labels = ['Clean', 'Suspicious']
        sizes = [total_files - malicious_count, malicious_count]

        if malicious_count == 0:
            sizes = [100]
            labels = ['All Files Clean']
            colors = ['#4CAF50']

        # Create pie chart with custom styling
        plt.pie(
            sizes,
            labels=labels,
            colors=colors,
            autopct='%1.1f%%',
            startangle=90,
            shadow=True,
            explode=(0, 0.1) if malicious_count > 0 else (0,),
            textprops={'fontsize': 10}
        )

        plt.title('File Analysis Summary', fontsize=12, pad=20)
        plt.axis('equal')

        # Save to bytes buffer
        img_data = io.BytesIO()
        plt.savefig(img_data, format='png', dpi=150, bbox_inches='tight')
        img_data.seek(0)
        plt.close()

        return img_data

    except Exception as e:
        logger.error(f"Failed to create summary chart: {str(e)}")
        return None